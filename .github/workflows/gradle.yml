name: CI/CD Pipeline with Docker and EC2

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3 # 사용할 checkout 액션의 버전

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17' # 사용할 JDK 버전
          distribution: 'temurin' # 사용할 Java 배포판
      
      - name: Build with Gradle
        run: ./gradlew build -x test # Gradle 빌드 명령 (테스트 스킵)

      - name: Build Docker image
        run: |
          docker build -t my-application:$GITHUB_SHA . # 애플리케이션의 Docker 이미지를 빌드
      
      - name: Push Docker image to registry
        run: |
          docker tag my-application:$GITHUB_SHA ${{ secrets.DOCKER_USERNAME }}/my-application:$GITHUB_SHA # Docker 이미지 태그 지정
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin # Docker Hub 로그인
          docker push ${{ secrets.DOCKER_USERNAME }}/my-application:$GITHUB_SHA # 이미지를 Docker Hub로 푸시

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.HOST }} # EC2 인스턴스의 IP 혹은 도메인
          username: ${{ secrets.EC2_USER }} # EC2 인스턴스의 사용자 이름
          key: ${{ secrets.SSH_PRIVATE_KEY }} # SSH 로그인을 위한 프라이빗 키
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/my-application:$GITHUB_SHA # Docker Hub로부터 이미지를 가져옴
            docker stop my-application || true # 기존에 실행 중이던 컨테이너 중지
            docker rm my-application || true # 기존에 실행 중이던 컨테이너 제거
            docker run -d --name my-application -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/my-application:$GITHUB_SHA # 새 컨테이너 실행
